name: Test Suite

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
  schedule:
    # 每天凌晨2点运行测试套件
    - cron: '0 2 * * *'

jobs:
  # 运行单元测试
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
    
    - name: Run unit tests
      timeout-minutes: 20
      run: |
        cd tests
        cargo test --lib --verbose --no-fail-fast
        echo "✅ Unit tests completed"
    
    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: tests/target/nightly/
        retention-days: 7

  # 运行集成测试
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
    
    - name: Run integration tests
      timeout-minutes: 25
      run: |
        cd tests
        cargo test --test integration_tests --verbose --no-fail-fast
        echo "✅ Integration tests completed"
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: tests/reports/
        retention-days: 7

  # 运行E2E测试
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Git
      run: |
        sudo apt-get update
        sudo apt-get install -y git
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
    
    - name: Run E2E tests
      timeout-minutes: 30
      run: |
        cd tests
        cargo test --test e2e_tests --verbose --no-fail-fast -- --nocapture
        echo "✅ E2E tests completed"
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: tests/reports/
        retention-days: 7

  # 运行性能测试
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
    
    - name: Run performance benchmarks
      timeout-minutes: 15
      run: |
        cd tests
        cargo bench --verbose
        echo "✅ Performance benchmarks completed"
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          tests/target/criterion/
          tests/reports/
        retention-days: 7

  # 验证GitHub Actions工作流
  validate-workflows:
    name: Validate Workflows
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
    
    - name: Build validation tools
      run: |
        cd tests
        cargo build --release
    
    - name: Validate CI workflow
      run: |
        cd tests
        ./target/release/validate_workflow ../.github/workflows/ci.yml
    
    - name: Validate release workflow
      run: |
        cd tests
        ./target/release/validate_workflow ../.github/workflows/release.yml
    
    - name: Validate security workflow
      run: |
        cd tests
        ./target/release/validate_workflow ../.github/workflows/security-scan.yml
    
    - name: Upload validation reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: workflow-validation-reports
        path: |
          tests/*_validation_report.md
          tests/reports/
        retention-days: 7

  # 运行安全测试
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-
    
    - name: Build security tools
      run: |
        cd tests
        cargo build --release
    
    - name: Test CI workflow security
      run: |
        cd tests
        ./target/release/security_test ../.github/workflows/ci.yml --output-format json
    
    - name: Test release workflow security
      run: |
        cd tests
        ./target/release/security_test ../.github/workflows/release.yml --output-format json
    
    - name: Test security workflow security
      run: |
        cd tests
        ./target/release/security_test ../.github/workflows/security-scan.yml --output-format json
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-reports
        path: |
          tests/*_security_report.*
          tests/reports/
        retention-days: 7

  # 运行完整测试套件
  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, validate-workflows, security-tests]
    if: always()
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Run comprehensive test script
      timeout-minutes: 15
      run: |
        chmod +x tests/scripts/run_tests.sh
        tests/scripts/run_tests.sh
    
    - name: Run build monitoring
      timeout-minutes: 10
      run: |
        chmod +x scripts/monitor_build.sh
        ./scripts/monitor_build.sh
    
    - name: Run CI health check
      timeout-minutes: 5
      run: |
        chmod +x scripts/ci_health_check.sh
        ./scripts/ci_health_check.sh
    
    - name: Generate comprehensive report
      run: |
        echo "# Comprehensive Test Suite Report" > comprehensive-report.md
        echo "" >> comprehensive-report.md
        echo "## Test Execution Summary" >> comprehensive-report.md
        echo "" >> comprehensive-report.md
        echo "- **Unit Tests:** $([ -f unit-test-results ] && echo "✅ PASSED" || echo "❌ FAILED")" >> comprehensive-report.md
        echo "- **Integration Tests:** $([ -f integration-test-results ] && echo "✅ PASSED" || echo "❌ FAILED")" >> comprehensive-report.md
        echo "- **E2E Tests:** $([ -f e2e-test-results ] && echo "✅ PASSED" || echo "❌ FAILED")" >> comprehensive-report.md
        echo "- **Performance Tests:** $([ -f performance-results ] && echo "✅ COMPLETED" || echo "❌ FAILED")" >> comprehensive-report.md
        echo "- **Workflow Validation:** $([ -f workflow-validation-reports ] && echo "✅ PASSED" || echo "❌ FAILED")" >> comprehensive-report.md
        echo "- **Security Tests:** $([ -f security-test-reports ] && echo "✅ PASSED" || echo "❌ FAILED")" >> comprehensive-report.md
        echo "- **Build Monitoring:** $([ -f build_report.md ] && echo "✅ COMPLETED" || echo "❌ FAILED")" >> comprehensive-report.md
        echo "- **CI Health Check:** $([ -f ci_health_report.md ] && echo "✅ COMPLETED" || echo "❌ FAILED")" >> comprehensive-report.md
        echo "" >> comprehensive-report.md
        echo "## System Health Status" >> comprehensive-report.md
        echo "" >> comprehensive-report.md
        echo "- **Dependencies:** $([ -f Cargo.lock ] && echo "✅ CONSISTENT" || echo "❌ INCONSISTENT")" >> comprehensive-report.md
        echo "- **Workspace:** $(cargo check --workspace --quiet 2>/dev/null && echo "✅ VALID" || echo "❌ INVALID")" >> comprehensive-report.md
        echo "- **Cache Configuration:** $([ -f .github/workflows/release.yml ] && grep -q "restore-keys" .github/workflows/release.yml && echo "✅ OPTIMIZED" || echo "⚠️ NEEDS OPTIMIZATION")" >> comprehensive-report.md
        echo "" >> comprehensive-report.md
        echo "## Execution Details" >> comprehensive-report.md
        echo "" >> comprehensive-report.md
        echo "**Run Date:** $(date)" >> comprehensive-report.md
        echo "**Commit:** ${{ github.sha }}" >> comprehensive-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> comprehensive-report.md
        echo "**Workflow:** ${{ github.workflow }}" >> comprehensive-report.md
        echo "**Environment:** ${{ runner.os }}" >> comprehensive-report.md
        echo "" >> comprehensive-report.md
        echo "## Recommendations" >> comprehensive-report.md
        echo "" >> comprehensive-report.md
        if [ -f ci_health_report.md ]; then
          echo "See \`ci_health_report.md\` for detailed recommendations." >> comprehensive-report.md
        fi
        echo "" >> comprehensive-report.md
        echo "---" >> comprehensive-report.md
        echo "*Generated by GitHub Actions Test Suite*" >> comprehensive-report.md
    
    - name: Upload comprehensive report
      uses: actions/upload-artifact@v4
      with:
        name: comprehensive-test-report
        path: |
          comprehensive-report.md
          build_report.md
          ci_health_report.md
          tests/reports/
        retention-days: 30

  # 生成测试摘要
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: full-test-suite
    if: always()
    
    steps:
    - name: Download comprehensive report
      uses: actions/download-artifact@v4
      with:
        name: comprehensive-test-report
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('comprehensive-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🧪 Test Suite Results\n\n${report}`
          });
    
    - name: Set test status
      if: always()
      run: |
        if [ -f "comprehensive-report.md" ]; then
          echo "✅ Test suite completed successfully"
        else
          echo "❌ Test suite failed"
          exit 1
        fi