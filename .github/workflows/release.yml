name: Release MCP Servers

on:
  push:
    tags:
      - 'mcp-*-v*'   # 监听格式为 mcp-server-name-version 的 tag

jobs:
  # 解析 tag 并确定要构建的服务器
  parse-tag:
    runs-on: ubuntu-latest
    outputs:
      server_name: ${{ steps.parse.outputs.server_name }}
      server_dir: ${{ steps.parse.outputs.server_dir }}
      binary_name: ${{ steps.parse.outputs.binary_name }}
      version: ${{ steps.parse.outputs.version }}
      should_build: ${{ steps.parse.outputs.should_build }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Parse tag and determine server
        id: parse
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Tag: $TAG"
          
          # 解析 tag 格式: mcp-server-name-version
          if [[ "$TAG" =~ ^mcp-(.+)-v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            SERVER_NAME="${BASH_REMATCH[1]}"
            VERSION="${BASH_REMATCH[2]}"
            
            echo "Server name: $SERVER_NAME"
            echo "Version: $VERSION"
            
            # 根据服务器名称设置构建参数
            case "$SERVER_NAME" in
              "json-validator")
                echo "server_dir=json-validator-server" >> $GITHUB_OUTPUT
                echo "binary_name=json-validator" >> $GITHUB_OUTPUT
                echo "should_build=true" >> $GITHUB_OUTPUT
                ;;
              "task-orchestrator")
                echo "server_dir=task-orchestrator" >> $GITHUB_OUTPUT
                echo "binary_name=task-orchestrator" >> $GITHUB_OUTPUT
                echo "should_build=true" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "Unknown server: $SERVER_NAME"
                echo "should_build=false" >> $GITHUB_OUTPUT
                ;;
            esac
            
            echo "server_name=$SERVER_NAME" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Invalid tag format: $TAG"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  # 构建对应的服务器
  build:
    needs: parse-tag
    if: needs.parse-tag.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_suffix: ""
            asset_name: ${{ needs.parse-tag.outputs.binary_name }}-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_suffix: ".exe"
            asset_name: ${{ needs.parse-tag.outputs.binary_name }}-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_suffix: ""
            asset_name: ${{ needs.parse-tag.outputs.binary_name }}-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_suffix: ""
            asset_name: ${{ needs.parse-tag.outputs.binary_name }}-macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build for ${{ matrix.os }}
        run: |
          cd servers/${{ needs.parse-tag.outputs.server_dir }}
          cargo build --release --bin ${{ needs.parse-tag.outputs.binary_name }} --target ${{ matrix.target }}
          
          # 重命名二进制文件以便发布
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv target/${{ matrix.target }}/release/${{ needs.parse-tag.outputs.binary_name }}${{ matrix.binary_suffix }} ../${{ matrix.asset_name }}
          else
            mv target/${{ matrix.target }}/release/${{ needs.parse-tag.outputs.binary_name }} ../${{ matrix.asset_name }}
            chmod +x ../${{ matrix.asset_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  # 创建 Release
  release:
    needs: [parse-tag, build]
    if: needs.parse-tag.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "${{ needs.parse-tag.outputs.server_name }} v${{ needs.parse-tag.outputs.version }}"
          body: |
            ## ${{ needs.parse-tag.outputs.server_name }} v${{ needs.parse-tag.outputs.version }}
            
            This is an automated release for the ${{ needs.parse-tag.outputs.server_name }} MCP server.
            
            ### Downloads
            
            | Platform | File |
            |----------|------|
            | Linux (x86_64) | `${{ needs.parse-tag.outputs.binary_name }}-linux-x86_64` |
            | Windows (x86_64) | `${{ needs.parse-tag.outputs.binary_name }}-windows-x86_64.exe` |
            | macOS (Intel) | `${{ needs.parse-tag.outputs.binary_name }}-macos-x86_64` |
            | macOS (Apple Silicon) | `${{ needs.parse-tag.outputs.binary_name }}-macos-arm64` |
            
            ### Installation
            
            #### Linux/macOS
            ```bash
            chmod +x ${{ needs.parse-tag.outputs.binary_name }}-*
            sudo mv ${{ needs.parse-tag.outputs.binary_name }}-* /usr/local/bin/${{ needs.parse-tag.outputs.binary_name }}
            ```
            
            #### Windows
            ```powershell
            # Download and use directly, or add to PATH
            ```
            
            ### Usage
            
            Add to your MCP client configuration:
            ```json
            {
              "mcpServers": {
                "${{ needs.parse-tag.outputs.server_name }}": {
                  "command": "/path/to/${{ needs.parse-tag.outputs.binary_name }}",
                  "args": []
                }
              }
            }
            ```
          files: |
            artifacts/${{ needs.parse-tag.outputs.binary_name }}-linux-x86_64/${{ needs.parse-tag.outputs.binary_name }}-linux-x86_64
            artifacts/${{ needs.parse-tag.outputs.binary_name }}-windows-x86_64.exe/${{ needs.parse-tag.outputs.binary_name }}-windows-x86_64.exe
            artifacts/${{ needs.parse-tag.outputs.binary_name }}-macos-x86_64/${{ needs.parse-tag.outputs.binary_name }}-macos-x86_64
            artifacts/${{ needs.parse-tag.outputs.binary_name }}-macos-arm64/${{ needs.parse-tag.outputs.binary_name }}-macos-arm64
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}