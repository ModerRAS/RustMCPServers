name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'latest'
      dry_run:
        description: 'Dry run (no actual release)'
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target: [x86_64, aarch64]
        exclude:
          - os: windows-latest
            target: aarch64
          - os: macos-latest
            target: aarch64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-${{ matrix.target }}-
          ${{ runner.os }}-cargo-
          ${{ runner.os }}-
    
    - name: Add target
      if: matrix.target != 'x86_64'
      run: rustup target add ${{ matrix.target }}-unknown-linux-gnu
    
    - name: Build
      run: |
        if [ "${{ matrix.target }}" = "x86_64" ]; then
          cargo build --all --release --verbose
        else
          cargo build --all --release --target ${{ matrix.target }}-unknown-linux-gnu --verbose
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.target }}
        path: |
          target/release/task-orchestrator
          target/release/task-orchestrator.exe
          target/**/release/task-orchestrator

  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-test-
          ${{ runner.os }}-cargo-
          ${{ runner.os }}-
    
    - name: Run tests
      run: cargo test --all --verbose
    
    - name: Run integration tests
      run: cargo test --all --test integration --verbose

  security:
    name: Security audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-audit-
          ${{ runner.os }}-
    
    - name: Install cargo-audit
      run: cargo install cargo-audit --locked
    
    - name: Run security audit
      run: cargo audit --deny warnings

  publish:
    name: Publish
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build, test, security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !github.event.inputs.dry_run
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-publish-
          ${{ runner.os }}-cargo-
          ${{ runner.os }}-
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
    
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          binaries-*/task-orchestrator
          binaries-*/task-orchestrator.exe
        draft: false
        prerelease: contains(github.ref, 'alpha') || contains(github.ref, 'beta')
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to crates.io
      run: |
        cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
        cargo publish --all
      if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta')"

  docker:
    name: Docker
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build, test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/task-orchestrator:latest
          ${{ secrets.DOCKER_USERNAME }}/task-orchestrator:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max