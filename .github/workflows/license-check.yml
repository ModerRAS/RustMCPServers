name: License Check

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Check license consistency
      run: |
        echo "üîç Checking license consistency..."
        
        # Ê£ÄÊü•Ê†πÁõÆÂΩïLICENSEÊñá‰ª∂
        if ! grep -q "MIT License" LICENSE; then
          echo "‚ùå Root LICENSE file is not MIT License"
          exit 1
        fi
        
        # Ê£ÄÊü•workspaceÈÖçÁΩÆ
        if ! grep -q 'license = "MIT"' Cargo.toml; then
          echo "‚ùå Workspace license is not MIT"
          exit 1
        fi
        
        # Ê£ÄÊü•ÂêÑ‰∏™ÂåÖÁöÑËÆ∏ÂèØËØÅÈÖçÁΩÆ
        missing_license_config=0
        for crate in servers/*/Cargo.toml; do
          echo "Checking $crate"
          if ! grep -q 'license.workspace = true' "$crate" && ! grep -q 'license = "MIT"' "$crate"; then
            echo "‚ùå License not properly configured in $crate"
            missing_license_config=$((missing_license_config + 1))
          fi
        done
        
        if [ $missing_license_config -gt 0 ]; then
          echo "‚ùå Found $missing_license_config crates with incorrect license configuration"
          exit 1
        fi
        
        echo "‚úÖ All license configurations are consistent"
    
    - name: Check license headers
      run: |
        echo "üîç Checking license headers in source files..."
        
        # Ê£ÄÊü•RustÊ∫êÊñá‰ª∂ÊòØÂê¶ÊúâËÆ∏ÂèØËØÅÂ§¥
        missing_headers=0
        for file in $(find . -name "*.rs" -not -path "./target/*" -not -path "./tmp/*"); do
          if ! grep -q "Copyright" "$file" && ! grep -q "MIT License" "$file"; then
            echo "‚ö†Ô∏è  Missing license header in $file"
            missing_headers=$((missing_headers + 1))
          fi
        done
        
        if [ $missing_headers -gt 0 ]; then
          echo "‚ö†Ô∏è  Found $missing_headers files without license headers"
          echo "   This is a warning, not an error"
        else
          echo "‚úÖ All source files have proper license headers"
        fi
    
    - name: Check dependency licenses
      run: |
        echo "üîç Checking dependency licenses..."
        
        # ÂÆâË£Öcargo-denyËøõË°åËÆ∏ÂèØËØÅÊ£ÄÊü•
        cargo install cargo-deny || true
        
        # ÂàõÂª∫deny.tomlÈÖçÁΩÆ
        cat > deny.toml << 'EOF'
        [licenses]
        copyleft = "warn"
        allow-osi-fsf-free = "neither"
        default = "deny"
        confidence-threshold = 0.8
        
        [[licenses.clarify]]
        name = "ring"
        expression = "MIT AND ISC AND OpenSSL"
        license-files = [{ path = "LICENSE", hash = 0xbd0eed23 }]
        
        [bans]
        multiple-versions = "warn"
        wildcards = "warn"
        highlight = "all"
        
        [sources]
        unknown-registry = "warn"
        unknown-git = "warn"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        allow-git = []
        EOF
        
        # ËøêË°åËÆ∏ÂèØËØÅÊ£ÄÊü•
        if command -v cargo-deny &> /dev/null; then
          cargo deny check licenses || true
        else
          echo "‚ö†Ô∏è  cargo-deny not available, skipping dependency license check"
        fi
        
        echo "‚úÖ License dependency check completed"
    
    - name: Generate license report
      run: |
        echo "üîç Generating license report..."
        
        # ÂÆâË£Öcargo-aboutÁîüÊàêËÆ∏ÂèØËØÅÊä•Âëä
        cargo install cargo-about || true
        
        # ÁîüÊàêËÆ∏ÂèØËØÅÊä•Âëä
        if command -v cargo-about &> /dev/null; then
          cargo-about generate about.hbs > LICENSE_DEPENDENCIES.html 2>/dev/null || true
          echo "‚úÖ License report generated"
        else
          echo "‚ö†Ô∏è  cargo-about not available, skipping report generation"
        fi