name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, rust-src

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Claude Code dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.anthropic
            ~/.claude
            ~/.cache/claude
          key: ${{ runner.os }}-claude-${{ hashFiles('**/Cargo.lock', '**/package.json', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-claude-

      - name: Install additional tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            curl \
            wget \
            git \
            docker.io \
            docker-compose \
            jq \
            yq

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cargo tools
        run: |
          cargo install cargo-audit || true
          cargo install cargo-outdated || true
          cargo install cargo-tarpaulin || true

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --all-features

      - name: Security audit
        run: cargo audit || true

      - name: Build release
        run: cargo build --release

      - name: Build Docker image
        run: docker build -t duckduckgo-mcp-server .

      - name: Run integration tests
        run: cargo test --test integration_tests -- --nocapture

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          allowed_tools: "Bash(cargo build),Bash(cargo test),Bash(cargo fmt),Bash(cargo clippy),Bash(docker build),Bash(docker run),Bash(cargo audit),Bash(cargo outdated)"
          
          # Optional: Add custom instructions for Claude to customize its behavior for your project
          custom_instructions: |
            This is a Rust workspace with a DuckDuckGo MCP server in duckduckgo-mcp-server/
            Use cargo commands for building and testing
            Follow Rust best practices and the project structure defined in CLAUDE.md
            Ensure all code passes clippy and formatting checks
            
        env:
          ANTHROPIC_BASE_URL: https://api.moonshot.cn/anthropic/

