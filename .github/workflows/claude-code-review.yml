name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    if: |
      !contains(github.event.pull_request.title, 'Generated with [Claude Code]') &&
      !contains(github.event.pull_request.body, 'Generated with [Claude Code]') &&
      !contains(join(github.event.pull_request.commits.*.message), 'Co-authored-by: Claude')

    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy, rust-src

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Claude Code dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.anthropic
            ~/.claude
            ~/.cache/claude
          key: ${{ runner.os }}-claude-${{ hashFiles('**/Cargo.lock', '**/package.json', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-claude-

      - name: Install additional tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkg-config \
            libssl-dev \
            curl \
            wget \
            git \
            docker.io \
            docker-compose \
            jq \
            yq

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install cargo tools
        run: |
          cargo install cargo-audit || true
          cargo install cargo-outdated || true
          cargo install cargo-tarpaulin || true

      - name: Check Rust formatting
        run: |
          cd duckduckgo-mcp-server
          cargo fmt --all -- --check

      - name: Run Clippy
        run: |
          cd duckduckgo-mcp-server
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: |
          cd duckduckgo-mcp-server
          cargo test --all-features

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        env:
          ANTHROPIC_BASE_URL: https://api.moonshot.cn/anthropic/
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            Please review this pull request and provide feedback on:
            - Code quality and best practices
            - Potential bugs or issues
            - Performance considerations
            - Security concerns
            - Test coverage
            - Rust-specific idioms and patterns
            - Cargo.toml dependencies
            - Docker configurations
            
            Be constructive and helpful in your feedback.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          direct_prompt: |
            Review this PR focusing on:
            - For Rust files: Safety, error handling, idiomatic patterns, and performance
            - For Cargo.toml: Dependency versions and security advisories
            - For Docker files: Security, efficiency, and best practices
            - For tests: Coverage, edge cases, and test quality
            - For GitHub Actions: Security and efficiency
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          allowed_tools: "Bash(cargo build),Bash(cargo test),Bash(cargo fmt),Bash(cargo clippy),Bash(docker build),Bash(docker run),Bash(cargo audit),Bash(cargo outdated)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

